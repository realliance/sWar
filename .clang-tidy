---
Checks: '*,-android-cloexec-*,-bugprone-branch-clone,-bugprone-macro-parentheses,-cert-dcl21-cpp,-cert-err58-cpp,-cppcoreguidelines-avoid-c-arrays,-cppcoreguidelines-avoid-magic-numbers,-cppcoreguidelines-avoid-non-const-global-variables,-cppcoreguidelines-macro-usage,-cppcoreguidelines-non-private-member-variables-in-classes,-cppcoreguidelines-owning-memory,-cppcoreguidelines-pro-type-const-cast,-fuchsia-*,-google-runtime-references,-hicpp-avoid-c-arrays,-hicpp-invalid-access-moved,-hicpp-uppercase-literal-suffix,-hicpp-vararg,-llvm-header-guard,-llvmlibc-*,-misc-macro-parentheses,-misc-non-private-member-variables-in-classes,-misc-no-recursion,-modernize-avoid-c-arrays,-modernize-raw-string-literal,-readability-implicit-bool-conversion,-readability-magic-numbers'
#
# .clang-tidy copied and modified from the libosmium project's .clang-tidy
# https://github.com/osmcode/libosmium/blob/master/.clang-tidy
# Thank you to them for having such a nice .clang-tidy with explanations.
#
#  For a list of check options, see:
#  https://clang.llvm.org/extra/clang-tidy/checks/list.html
#
#  Disabled checks:
#
#  android-cloexec-*
#    O_CLOEXEC isn't available on Windows making this non-portable.
#
#  bugprone-branch-clone
#    Nice idea but collides but with switch statements we'll need to use
#    fall-throughs to fix this, which is also bad.
#
#  bugprone-macro-parentheses
#    False positive in the only place where it reports something and
#    disabling locally doesn't work.
#
#  cert-dcl21-cpp
#    It is unclear whether this is still a good recommendation in modern C++.
#
#  cppcoreguidelines-avoid-c-arrays
#    Alias for modernize-avoid-c-arrays.
#
#  cppcoreguidelines-avoid-magic-numbers
#    Generally good advice, but there are too many places where this is
#    useful, for instance in tests.
#
#  cppcoreguidelines-avoid-non-const-global-variables
#    Had annoying false positives in source files
#
#  cppcoreguidelines-macro-usage
#    There are cases where we actually need macros.
#
#  cppcoreguidelines-non-private-member-variables-in-classes
#    Alias for misc-non-private-member-variables-in-classes
#
#  cppcoreguidelines-owning-memory
#    Don't want to add dependency on gsl library.
#
#  cppcoreguidelines-pro-type-const-cast
#    When you need it, you need it.
#
#  fuchsia-*
#    Much too strict.
#
#  google-runtime-references
#    This is just a matter of preference, and we can't change the interfaces
#    now anyways.
#
#  hicpp-avoid-c-arrays
#    Alias for modernize-avoid-c-arrays.
#
#  hicpp-invalid-access-moved
#    Creates false positives.
#
#  hicpp-uppercase-literal-suffix
#    Alias for readability-uppercase-literal-suffix. Removed so
#    we don't need seperate rules for the alias.
#
#  hicpp-vararg
#    Too strict, sometimes calling vararg functions is necessary.
#
#  llvm-header-guard
#    Using #pragma instead of tradition header-guards.
#
#  llvmlibc-*
#    Doesn't apply to us.
#
#  misc-macro-parentheses
#    Old name for bugprone-macro-parentheses.
#
#  misc-non-private-member-variables-in-classes
#    Reports this also for structs, which doesn't make any sense. There is
#    an option "IgnoreClassesWithAllMemberVariablesBeingPublic" which should
#    disable this, but it didn't work for me.
#
#  misc-no-recursion
#    There is nothing wrong with recursion.
#
#  modernize-avoid-c-arrays
#    Makes sense for some array, but especially for char arrays using
#    std::array isn't a good solution.
#
#  modernize-raw-string-literal
#    Readability isn't that much better, arguably worse because of the new
#    syntax.
#
#  readability-implicit-bool-cast
#    Old name for readability-implicit-bool-conversion.
#
#  readability-magic-numbers
#    Alias for cppcoreguidelines-avoid-magic-numbers.
#
WarningsAsErrors: ''
FormatStyle:     file
HeaderFilterRegex: ''

#  we use this in Card::Type enum definition with positive integers
#  or we ignore them here.
CheckOptions:
  - key:              hicpp-signed-bitwise.IgnorePositiveIntegerLiterals
    value:            'true'
  - key:              readability-uppercase-literal-suffix.NewSuffixes
    value:            'u;uL;L'
...
